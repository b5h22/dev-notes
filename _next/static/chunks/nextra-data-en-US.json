{"/":{"title":"Dev notes","data":{"":"These are the notes from my journey in learning software development.\nPlease note that these notes are personally curated, and there may be errors. If you find any, I would appreciate it if you could submit a pull request or open an issue to help me improve the content.","table-of-contents#Table of Contents":"C\nReact\nError Notes"}},"/error-notes/C/01-scanf":{"title":"01 Scanf","data":{"c-error-notes#C Error Notes":"","problems-with-c#Problems with %c":"scanf() only takes the characters it needs from the buffer, but this can cause issues when using %c. Consider the following program. When scanf() reads an integer, it leaves behind a newline character ('\\n') in the input buffer. The next time scanf() is called with %c, it thinks this leftover '\\n' is the input character. Because of this, the program never gets to read the tax status input from the buffer.\nBuffer?  A buffer is like a temporary storage spot in a computer's memory. It holds data for a short time while it's being moved from one place to another.\n#include <stdio.h>\nint main(void)\n{\n    int items;\n    char status; // tax status g or p\n    printf(\"Number of items : \");\n    scanf(\"%d\", &items);\n    printf(\"Status : \");\n    scanf(\"%c\", &status);   // ERROR: assigns \\n to variable 'status'\n                            //        and will not pause for user input\n    printf(\"%d items (%c)\\n\", items, status);\n    return 0;\n}\nThe above program produces the following output:\nNumber of items : 25\nStatus : 25 items (\n)\nNotice how the newline character ('\\n') (which was assigned to the tax status variable) places the closing parenthesis on a newline.\nMethod-1:\nscanf(\"%d\", &items);\nscanf(\"%c%c\", &junk, &status); // store one character in junk first\nMethod-2:\nscanf(\"%d\", &items);\nscanf(\"%*c%c\", &status);       // discard(ignore) one character first\nMethod-3:\nscanf(\"%d\", &items);\nscanf(\" %c\", &status);         // discard(ignore) all whitespace first\nMethod-4:\nscanf(\"%d%*c\", &items);        // discard(ignore) newline ('\\n')\nscanf(\"%c\", &status);\nMethod-5:\nscanf(\"%d\", &items);\nclear();                       // call a custom function to clear the buffer\nscanf(\"%c\", &status);"}},"/c/01-basics":{"title":"01 Basics","data":{"basic-c-programming#Basic C Programming":"","features-of-c#Features of C":"C is English-like\nC is quite compact - has a small number of keywords\nC is the lowest in level of the high-level languages\nC can be faster and more powerful than other high-level languages\nC programs that need to be maintained are large in number\nC is used extensively in high-performance computing\nUNIX, Linux and Windows operating systems are written in C and C++","c-compiler#C Compiler":"A C compiler is an operating system program that converts C language statements into machine language equivalents.","c-program-structure#C Program Structure":"#include <stdio.h> // Preprocessor directive\n// #: This symbol at the beginning of a line is used for preprocessor commands.\n// <stdio.h>: This is a header file. (stdio.h stands for \"standard input-output header\")\nint main() { // Function header\n// int main() {: 'int' means that this function will return an integer. \n// 'main()' is a special function that always runs first when your program starts.\n    printf(\"Hello World!\"); // Function body\n    // printf(\"Hello World!\");: 'printf' is a function used to print text on your screen.\n    return 0; // Function footer\n    // 'return' ends the function and sends back (or \"returns\") an integer value\n    //  in this case, 0 indicates that everything went okay.\n}\n// }: This closes off our main function - everything between { and } belongs to main().","escape-sequence--comments#Escape Sequence / Comments":"Escape Sequence\tDescription\t\\n\tLine break\t\"\t\"\t\\\t\\\t\\t\tTab\t//\tSingle line comment\t/* */\tMulti-line comment"}}}