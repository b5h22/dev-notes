{"/about":{"title":"About","data":{"b5h22-#b5h22 ðŸ‘‹":"","software-developer-in-training#Software Developer in Training":"","a-little-more-about-me#A little more about me...":"const b5h22 = {\n  skills: {\n    languages: [C, Javascript, HTML, CSS],\n    frameworks: [React, NodeJS, Express],\n    databases: [MongoDB, ],\n    tools: [Git, GitHub, VSCode]\n  },\n}"}},"/c/01-basics":{"title":"01 Basics","data":{"basic-c-programming#Basic C Programming":"","features-of-c#Features of C":"C is English-like\nC is quite compact - has a small number of keywords\nC is the lowest in level of the high-level languages\nC can be faster and more powerful than other high-level languages\nC programs that need to be maintained are large in number\nC is used extensively in high-performance computing\nUNIX, Linux and Windows operating systems are written in C and C++","c-compiler#C Compiler":"A C compiler is an operating system program that converts C language statements into machine language equivalents.","c-program-structure#C Program Structure":"#include <stdio.h> // Preprocessor directive\n// #: This symbol at the beginning of a line is used for preprocessor commands.\n// <stdio.h>: This is a header file. (stdio.h stands for \"standard input-output header\")\nint main() { // Function header\n// int main() {: 'int' means that this function will return an integer. \n// 'main()' is a special function that always runs first when your program starts.\n    printf(\"Hello World!\"); // Function body\n    // printf(\"Hello World!\");: 'printf' is a function used to print text on your screen.\n    return 0; // Function footer\n    // 'return' ends the function and sends back (or \"returns\") an integer value\n    //  in this case, 0 indicates that everything went okay.\n}\n// }: This closes off our main function - everything between { and } belongs to main().","escape-sequence--comments#Escape Sequence / Comments":"Escape Sequence\tDescription\t\\n\tLine break\t\\\"\t\"\t\\\\\t\\\t\\t\tTab\t//\tSingle line comment\t/* */\tMulti-line comment"}},"/error-notes/C/01-scanf":{"title":"01 Scanf","data":{"c-error-notes#C Error Notes":"","problems-with-c#Problems with %c":"scanf() only takes the characters it needs from the buffer, but this can cause issues when using %c. Consider the following program. When scanf() reads an integer, it leaves behind a newline character ('\\n') in the input buffer. The next time scanf() is called with %c, it thinks this leftover '\\n' is the input character. Because of this, the program never gets to read the tax status input from the buffer.\nBuffer?  A buffer is like a temporary storage spot in a computer's memory. It holds data for a short time while it's being moved from one place to another.\n#include <stdio.h>\nint main(void)\n{\n    int items;\n    char status; // tax status g or p\n    printf(\"Number of items : \");\n    scanf(\"%d\", &items);\n    printf(\"Status : \");\n    scanf(\"%c\", &status);   // ERROR: assigns \\n to variable 'status'\n                            //        and will not pause for user input\n    printf(\"%d items (%c)\\n\", items, status);\n    return 0;\n}\nThe above program produces the following output:\nNumber of items : 25\nStatus : 25 items (\n)\nNotice how the newline character ('\\n') (which was assigned to the tax status variable) places the closing parenthesis on a newline.\nMethod-1:\nscanf(\"%d\", &items);\nscanf(\"%c%c\", &junk, &status); // store one character in junk first\nMethod-2:\nscanf(\"%d\", &items);\nscanf(\"%*c%c\", &status);       // discard(ignore) one character first\nMethod-3:\nscanf(\"%d\", &items);\nscanf(\" %c\", &status);         // discard(ignore) all whitespace first\nMethod-4:\nscanf(\"%d%*c\", &items);        // discard(ignore) newline ('\\n')\nscanf(\"%c\", &status);\nMethod-5:\nscanf(\"%d\", &items);\nclear();                       // call a custom function to clear the buffer\nscanf(\"%c\", &status);"}},"/":{"title":"Dev notes","data":{"":"These are the notes from my journey in learning software development.\nPlease note that these notes are personally curated, and there may be errors. If you find any, I would appreciate it if you could submit a pull request or open an issue to help me improve the content.","table-of-contents#Table of Contents":"","c#C":"01-Basics\n02-Types\n03-Simple Calculation\n04-Expression","react#React":"01-HTML Attribute Conversion: From HTML to JSX","error-notes#Error Notes":"","c-1#C":"01-scanf"}},"/c/02-types":{"title":"02 Types","data":{"types#Types":"","arithmetic-types-size-range-type-specifier#Arithmetic Types (Size, Range, Type Specifier)":"Data Type\tSize (in bytes)\tRange\tType Specifier\tchar\t1\t-128 to 127 or 0 to 255\t%c\tint\t4\t-2,147,483,648 to 2,147,483,647\t%d\tfloat\t4\tapproximately 6 decimal digits of precision\t%f\tdouble\t8\tapproximately 15 decimal digits of precision\t%lf","variable#Variable":"Declare variable\n// [type] [variable name];\nint age; // declares an integer variable named 'age'\nfloat weight; // declares a float variable named 'weight'\nchar firstLetter; // declares a character variable named 'firstLetter'\nOnce declared, you can assign values to these variables like this:\nage = 20; // assigns the value 20 to 'age'\nweight = 70.5; // assigns the value 70.5 to 'weight'\nfirstLetter = 'A'; // assigns the character A to 'firstLetter'\nYou can also declare and assign values at the same time:\nint age = 20;\nfloat weight = 70.5;\nchar firstLetter = 'A';\nYou may group the identifiers of variables that share the same type within a single declaration by separating the identifiers by commas.\n char   children, digit;\n int    nPages = 10, nBooks = 3, nRooms = 1;\n float  cashFare, height = 185.5, weight = 70.5;\n double loan, mortgage;\nYou can use const keyword to declare a constant. A constant is a type of variable whose value cannot be changed after it's been defined.\nconst int myConstant = 10;","naming-conventions#Naming Conventions":"Start with a letter or an underscore (_).\nUse any mix of letters, numbers, and underscores (_).\nKeep it under 32 characters long.\nDon't use C reserved words","tips-for-good-variable-names#Tips for good variable names":"Make the name explain what it's used for.\nKeep it short but clear.\nMake sure the name matches what data is stored in it.\nThe name should make your code easier to read.\nUse \"camelNotation\" where the first letter of each word is capitalized except the first word (like \"myVariableName\").\nAvoid using underscores (_) because system libraries often use them and you don't want to mix up your variables with theirs."}},"/react/01-attribute-conversion":{"title":"HTML Attribute Conversion: From HTML to JSX","data":{"":"HTML Attribute\tJSX Attribute\tUsed in HTML Tags\tclass\tclassName\tAll HTML tags\tfor\thtmlFor\tlabel, output\tonchange\tonChange\tinput, select, textarea\tonclick\tonClick\tAll clickable tags (e.g., button, a)"}},"/c/03-simple-calculation":{"title":"03 Simple Calculation","data":{"simple-calculation#Simple Calculation":"","format#Format":"Type\tSpecifier\tintput/output as\tchar\t%c\tcharacter\tint,short\t%d\tdecimal integer\tfloat\t%f\tfloating-point\tdouble\t%lf\tfloating-point\t\nThe default number of decimal places displayed by %f and %lf is 6. To display two decimal places, we write %.2f or %.2lf.","simple-input#Simple input":"The scanf(...) command takes in information from the user and keeps it in a special place in the computer's memory linked to a certain variable in the program.\nscanf(format, address);\naddress: contains the address of the destination variable. use the prefix & to refer to the 'address of' of a variable.","simple-output#Simple output":"The printf(...) command shows the user the value of a certain variable or result of an operation.\nprintf(format, expression);"}},"/c/04-expression":{"title":"04 Expression","data":{"expression#Expression":"","binary-operations#Binary Operations":"Binary arithmetic operations are math actions we can do on whole numbers. These include adding, subtracting, multiplying, dividing and finding the remainder.\nArithmetic Expression\tMeaning\toperand + operand\tadd the operands\toperand - operand\tsubtract the right from the left operand\toperand * operand\tmultiply the operands\toperand / operand\tdivide the left by the right operand\toperand % operand\tremainder of the division of left by right","relational-expressions#Relational Expressions":"C language has six ways to compare things. These comparisons are called relational expressions. They look at two values and decide if a condition is true or not. If it's true, they give back 1; if it's false, they give back 0. The result you get from these comparisons is always an int type.\nRelational Expression\tMeaning\toperand == operand\toperands are equal\toperand > operand\tleft is greater than the right\toperand >= operand\tleft is greater than or equal to the right\toperand < operand\tleft is less than the right\toperand <= operand\tleft is less than or equal to the right\toperand != operand\tleft is not equal to the right","logical-expressions#Logical Expressions":"C language doesn't have special words for true or false. Instead, it sees the number 0 as false and any other number as true. C has three ways to do logical operations. These operations give back 1 if they are true and 0 if they are false. The result you get from these operations is always an int type.\nLogical Expression\tMeaning\toperand && operand\tboth operands are true\toperand || operand\tone of the operands is true\t! operand\tthe operand is not true"}}}