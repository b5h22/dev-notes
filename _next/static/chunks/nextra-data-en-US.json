{"/about":{"title":"About","data":{"b5h22-#b5h22 ðŸ‘‹":"","software-developer-in-training#Software Developer in Training":"","a-little-more-about-me#A little more about me...":"const b5h22 = {\n  skills: {\n    languages: [C, Javascript, HTML, CSS],\n    frameworks: [React, NodeJS, Express],\n    databases: [MongoDB],\n    tools: [Git, GitHub, VSCode]\n  },\n}"}},"/c/01-basics":{"title":"01 Basics","data":{"basic-c-programming#Basic C Programming":"","features-of-c#Features of C":"C is English-like\nC is quite compact - has a small number of keywords\nC is the lowest in level of the high-level languages\nC can be faster and more powerful than other high-level languages\nC programs that need to be maintained are large in number\nC is used extensively in high-performance computing\nUNIX, Linux and Windows operating systems are written in C and C++","c-compiler#C Compiler":"A C compiler is an operating system program that converts C language statements into machine language equivalents.","c-program-structure#C Program Structure":"#include <stdio.h> // Preprocessor directive\n// #: This symbol at the beginning of a line is used for preprocessor commands.\n// <stdio.h>: This is a header file. (stdio.h stands for \"standard input-output header\")\nint main() { // Function header\n// int main() {: 'int' means that this function will return an integer. \n// 'main()' is a special function that always runs first when your program starts.\n    printf(\"Hello World!\"); // Function body\n    // printf(\"Hello World!\");: 'printf' is a function used to print text on your screen.\n    return 0; // Function footer\n    // 'return' ends the function and sends back (or \"returns\") an integer value\n    //  in this case, 0 indicates that everything went okay.\n}\n// }: This closes off our main function - everything between { and } belongs to main().","escape-sequence--comments#Escape Sequence / Comments":"Escape Sequence\tDescription\t\\n\tLine break\t\\\"\t\"\t\\\\\t\\\t\\t\tTab\t//\tSingle line comment\t/* */\tMulti-line comment"}},"/c/03-simple-calculation":{"title":"03 Simple Calculation","data":{"simple-calculation#Simple Calculation":"","format#Format":"Type\tSpecifier\tintput/output as\tchar\t%c\tcharacter\tint,short\t%d\tdecimal integer\tfloat\t%f\tfloating-point\tdouble\t%lf\tfloating-point\t\nThe default number of decimal places displayed by %f and %lf is 6. To display two decimal places, we write %.2f or %.2lf.","simple-input#Simple input":"The scanf(...) command takes in information from the user and keeps it in a special place in the computer's memory linked to a certain variable in the program.\nscanf(format, address);\naddress: contains the address of the destination variable. use the prefix & to refer to the 'address of' of a variable.","simple-output#Simple output":"The printf(...) command shows the user the value of a certain variable or result of an operation.\nprintf(format, expression);"}},"/c/02-types":{"title":"02 Types","data":{"types#Types":"","arithmetic-types-size-range-type-specifier#Arithmetic Types (Size, Range, Type Specifier)":"Data Type\tSize (in bytes)\tRange\tType Specifier\tchar\t1\t-128 to 127 or 0 to 255\t%c\tint\t4\t-2,147,483,648 to 2,147,483,647\t%d\tfloat\t4\tapproximately 6 decimal digits of precision\t%f\tdouble\t8\tapproximately 15 decimal digits of precision\t%lf","variable#Variable":"Declare variable\n// [type] [variable name];\nint age; // declares an integer variable named 'age'\nfloat weight; // declares a float variable named 'weight'\nchar firstLetter; // declares a character variable named 'firstLetter'\nOnce declared, you can assign values to these variables like this:\nage = 20; // assigns the value 20 to 'age'\nweight = 70.5; // assigns the value 70.5 to 'weight'\nfirstLetter = 'A'; // assigns the character A to 'firstLetter'\nYou can also declare and assign values at the same time:\nint age = 20;\nfloat weight = 70.5;\nchar firstLetter = 'A';\nYou may group the identifiers of variables that share the same type within a single declaration by separating the identifiers by commas.\n char   children, digit;\n int    nPages = 10, nBooks = 3, nRooms = 1;\n float  cashFare, height = 185.5, weight = 70.5;\n double loan, mortgage;\nYou can use const keyword to declare a constant. A constant is a type of variable whose value cannot be changed after it's been defined.\nconst int myConstant = 10;","naming-conventions#Naming Conventions":"Start with a letter or an underscore (_).\nUse any mix of letters, numbers, and underscores (_).\nKeep it under 32 characters long.\nDon't use C reserved words","tips-for-good-variable-names#Tips for good variable names":"Make the name explain what it's used for.\nKeep it short but clear.\nMake sure the name matches what data is stored in it.\nThe name should make your code easier to read.\nUse \"camelNotation\" where the first letter of each word is capitalized except the first word (like \"myVariableName\").\nAvoid using underscores (_) because system libraries often use them and you don't want to mix up your variables with theirs."}},"/c/04-expression":{"title":"04 Expression","data":{"expression#Expression":"","binary-operations#Binary Operations":"Binary arithmetic operations are math actions we can do on whole numbers. These include adding, subtracting, multiplying, dividing and finding the remainder.\nArithmetic Expression\tMeaning\toperand + operand\tadd the operands\toperand - operand\tsubtract the right from the left operand\toperand * operand\tmultiply the operands\toperand / operand\tdivide the left by the right operand\toperand % operand\tremainder of the division of left by right","relational-expressions#Relational Expressions":"C language has six ways to compare things. These comparisons are called relational expressions. They look at two values and decide if a condition is true or not. If it's true, they give back 1; if it's false, they give back 0. The result you get from these comparisons is always an int type.\nRelational Expression\tMeaning\toperand == operand\toperands are equal\toperand > operand\tleft is greater than the right\toperand >= operand\tleft is greater than or equal to the right\toperand < operand\tleft is less than the right\toperand <= operand\tleft is less than or equal to the right\toperand != operand\tleft is not equal to the right","logical-expressions#Logical Expressions":"C language doesn't have special words for true or false. Instead, it sees the number 0 as false and any other number as true. C has three ways to do logical operations. These operations give back 1 if they are true and 0 if they are false. The result you get from these operations is always an int type.\nLogical Expression\tMeaning\toperand && operand\tboth operands are true\toperand || operand\tone of the operands is true\t! operand\tthe operand is not true","demorgans-law#DeMorgan's Law":"DeMorgan's Law is a rule in logic that helps us simplify complex statements. It has two parts:\n\"Not (A and B)\" is the same as \"(Not A) or (Not B)\"\n\"Not (A or B)\" is the same as \"(Not A) and (Not B)\"\nExample:\n// below logically identical\n// example #1\nc = !(a && b)\nc = !a || !b\n// example #2\nc = !a && !b\nc = !(a || b)","binary-operands#Binary operands":"Expression\tShorthand\tLonghand\tMeaning\toperand += operand\ti += 4\ti = i + 4\tadd 4 to i and assign to i\toperand -= operand\ti -= 4\ti = i - 4\tsubtract 4 from i and assign to i\toperand *= operand\ti *= 4\ti = i * 4\tmultiply i by 4 and assign to i\toperand /= operand\ti /= 4\ti = i / 4\tdivide i by 4 and assign to i\toperand %= operand\ti %= 4\ti = i % 4\tremainder after i / 4 then assign to i","unary-operands#Unary Operands":"Expression\tShorthand\tLonghand\tMeaning\t++operand\t++i\ti = i + 1\t(prefix) increment i by 1\toperand++\ti++\ti = i + 1\t(postfix) increment i by 1\t--operand\t--i\ti = i - 1\t(prefix) decrement i by 1\toperand--\ti--\ti = i - 1\t(postfix) decrement i by 1\t\nPrefix does the operation first, then gives you the result.\nPostfix gives you the result first, then does the operation.","type-casting#Type Casting":"Type conversions are supported by the C programming language. In order to convertÂ the type of an operand, you put the target type in parenthesis before the operand. ThisÂ statement is known as a cast.\nint main() {\n    int a = 5, b = 2;\n    printf(\"Result of int division: %d\\n\", a / b); // 2\n    printf(\"Result of double division: %f\\n\", (double)a / b); // 2.5\n    return 0;\n}","mixed-type-expression#Mixed-Type Expression":"Computers use different parts to handle whole numbers and decimal numbers. So, they can only work with calculations that use the same type of numbers. But sometimes, calculations use both types of numbers. So, we need rules to change one type of number into another type for these calculations.\nType\tRank\tlong double\thighest\tdouble\t...\tfloat\t...\tlong long\t...\tlong\t...\tint\t...\tshort\t...\tchar\tlowest\t\nIn a mixed-type expression, lower-ranked types are automatically converted to the type of the highest-ranked operand. This is called \"promotion\".\nint a = 5;\ndouble b = 3.14;\nb = a; // 'a' is automatically promoted to a double\n\"Narrowing\" is the opposite of promotion. It's when a value of a higher-ranked type is assigned to a variable of a lower-ranked type. This can cause a loss of data.\ndouble a = 3.14;\nint b;\nb = a; // 'a' is truncated to an int, so 'b' becomes 3, not 3.14"}},"/c/05-logic":{"title":"05 Logic","data":{"logic#Logic":"","structured-programming#Structured programming":"Structured programming is a way of writing code that focuses on making it easy to read and change. It breaks down a program into smaller parts using functions and blocks. It uses three main parts: sequence, selection, and repetition. The aim is to make the code simple and manageable.\nSequence: This is the normal flow where statements are executed line by line in order.\nSelection: This is implemented with control statements like \"if\", \"if-else\", and \"switch\". It allows the program to choose between different paths based on certain conditions.\nRepetition: This is implemented with loops like \"for\", \"while\", and \"do-while\". It allows certain parts of the code to be repeated several times.","preliminary-design#Preliminary Design":"Preliminary Design is the early stage of designing where you create a basic plan of what you want to make, without all the small details.\nPseudocode: It's like a draft of your program, written in simple English. It helps you plan the steps your program will take, without using real code.\nFlowcharts: These are pictures with symbols and arrows that show the steps and flow of your program. They help you see and share your plan before you start coding.","selection-constructs#Selection constructs":"The C language supports three selection constructs:\noptional path\nalternative paths\nconditional expression\nThe flow charts for these three constructs are shown below:","optional-path#Optional Path":"It is a programming term that refers to a part of the code which only runs if a specific condition is met. In other words, this part of the code is optional and only runs when the condition is true.\nif (condition)\n  sequence\nHere, the condition could be a relational expression or a logical expression. The sequence may be a single statement or a code block.","single-statement#Single Statement":"if (likePizza == 1)\n  printf(\"I like pizza\\n\");","code-block-more-than-a-single-statement#Code Block (more than a single statement)":"if (likePizza == 1)\n{\n  printf(\"I like pizza\\n\");\n  printf(\"I want more pizza\\n\");\n}","alternative-paths#Alternative Paths":"The C language supports two ways of describing alternative paths: an binary select construct and a multiple selection construct.","binary-selection#Binary Selection":"if (condition)\n  sequence1\nelse\n  sequence2\nHere, the condition could be a relational expression or a logical expression. The sequence may be a single statement or a code block. The program executes the sequence following the if only if the condition is true. The program executes the sequence following the else only if the condition is false.","single-statement-1#Single Statement":"if (likePizza == 1)\n  printf(\"I like pizza\\n\");\nelse\n  printf(\"I hate pizza\\n\");","code-block-more-than-a-single-statement-1#Code Block (more than a single statement)":"if (likePizza == 1)\n{\n  printf(\"I like pizza\\n\");\n}\nelse\n{\n  printf(\"I hate pizza\\n\");\n  printf(\"I don't want pizza\\n\");\n}","multiple-selection#Multiple Selection":"For three alternative paths, we append an if else construct to the else keyword.\n if (condition)\n  sequence\n else if (condition)\n  sequence\n else\n  sequence\nIf the first condition is true, the program skips the second and third sequences. If the first condition is false, the program skips the first sequence and evaluates the second condition. The program executes the second sequence only if the first condition is false and the second condition is true. The program executes the third sequence and skips the first two only if both conditions are false.","compound-conditions#Compound Conditions":"The condition in a selection construct may be a compound condition. A compound condition takes the form of a logical expression\nif (age > 12 && age < 16)\n{\n  printf(\"Student Fare - no id required\\n\");\n}\nelse if (age > 15 && age < 20)\n{\n  printf(\"Student Fare - id is required\\n\");\n}\nelse if (age < 13)\n{\n  printf(\"Child ride for free!\\n\");\n}\nelse if (age >= 65)\n{\n  printf(\"Senior Fare - id is required\\n\");\n}\nelse\n{\n  printf(\"Adult Fare\\n\");\n}","case-by-case#Case-by-Case":"The \"switch\" structure in programming checks a condition, which can be simple or complex, and matches it with different fixed values or results. Here is how it looks:\nswitch (question)\n{\ncase choice1:\n       do something\n       break;\ncase choice2:\n       do something else\n       break;\ndefault:\n       do another thing\n}\n\"switch\" is like a multi-choice quiz. You have a question (condition) and many choices (cases). If your question matches 'choice1', you will do something. If it matches 'choice2', you will do something else. If it doesn't match any choices, you will do another thing (default). \"break\" means you stop and move on. If there is no \"break\", you will also do the things for the next choice.","conditional-expression#Conditional Expression":"The conditional expression is a ternary operator that takes three operands. It is used to replace an if else construct that assigns a value to a variable based on a condition. The conditional expression has the following form:\ncondition ? expression1 : expression2\nFirst, it checks a condition. If it's true, it uses the first expression, and if it's false, it uses the second. Only the expression that matches the condition is used.\n// Example\nint a = 10, b = 20;\nint max = (a > b) ? a : b;\nIn this example, (a > b) is the condition. If a is greater than b, the expression a is used, and max becomes a. If a is not greater than b, the expression b is used, and max becomes b. Since 20 is greater than 10, in this case, max would become 20.","iteration-constructs#Iteration constructs":"In C programming, there are three ways to repeat actions: 'while', 'do while', and 'for'. Each method needs a set-up step, a condition to check, and a step to change things for the next round. If we forget to change things, or the condition is always true, the action will repeat forever, creating an infinite loop.","while#while":"/*\n  while (condition)\n  {\n      sequence\n  }\n*/\nint i = 1;\nwhile (i <= 5) {\n    printf(\"%d \", i);\n    i++;\n}","do-while#do while":"/*\n  do {\n      sequence\n  } while (condition);\n*/\nint i = 1;\ndo {\n    printf(\"%d \", i);\n    i++;\n} while (i <= 5);","for#for":"/*\n  for (initialization; condition; change)\n  {\n      sequence\n  }\n*/\nfor (int i = 1; i <= 5; i++) {\n    printf(\"%d \", i);\n}\nIn all three examples, the loop prints the numbers 1 to 5. The while loop checks the condition before the loop starts, the do/while loop checks it after the loop runs once, and the for loop includes the initialization, condition, and increment all in one line.","flags#Flags":"Flagging in programming is a technique to follow the single-entry single-exit principle, making loops simpler. Flags, either true or false, control the flow of iterations, deciding whether to continue or stop, so avoiding crossed paths and improving the overall design and maintainability of the code."}},"/c/06-array":{"title":"06 Array","data":{"array#Array":"","definition#Definition":"An array is a type of data structure that can store a fixed-size ordered group of elements of the same type.","elements#Elements":"Each item stored in an array is called an element. These elements are accessed by their numerical index. The first element starts at index 0.\nIn C language, the computer doesn't check if we are trying to access a spot in the array that doesn't exist. So, it's up to us, the programmers, to make sure we don't use an index that is outside the size of the array. If our array has 5 spots, we need to make sure we only try to access spots 0 to 4.","initialization#Initialization":"To initialize an array, you define the type of elements it will hold, the name of the array(identifier), and the size within square brackets. For example:\n// type identifier[size];\nint numbers[5];\nThis means you have an array named 'numbers' that can hold 5 integers.","accessing-elements#Accessing Elements":"Accessing Elements: To access an element in the array, you refer to its index. For example:\nnumbers[0] = 10;\nThis means you're putting the integer '10' in the first spot in the 'numbers' array.","initializing-with-values#Initializing with Values":"You can initialize an array with values at the same time you declare it. Like this:\n// type identifier[ size ] = { value, ... , value };\nint numbers[5] = {1, 2, 3, 4, 5};\nThis means you have an array named 'numbers' that holds five integers, and you've put 1 in the first spot, 2 in the second spot, and so on.\nRemember, arrays in C are zero-indexed, which means the first element is at index 0, the second element is at index 1, and so forth. So if you have an array of size 5, the indices will be 0, 1, 2, 3, and 4.","parallel-arrays#Parallel Arrays":"These are two or more arrays where the related data is stored at the same index in each array. For example:\n#include <stdio.h>\nint main(void)\n{\n    int i;\n    int sku[]      = { 2156, 4633, 3122, 5611};\n    double price[] = { 2.34, 7.89, 6.56, 9.32};\n    const int n    = 4;\n    printf(\"  SKU Price\\n\");\n    for (i = 0; i < n; i++)\n    {\n        printf(\"%5d $%.2lf\\n\", sku[i], price[i]);\n    }\n    return 0;\n}\nOutput of the above program:\n  SKU Price\n 2156 $2.34\n 4633 $7.89\n 3122 $6.56\n 5611 $9.32\nThe sku[] array holds the key data, while the price[] array holds the value data. Note how the elements of parallel arrays with the same index make up the fields of a single record of information.Parallel arrays are simple to process. For example, once we find the index of the element that matches the specified sku, we also have the index of the unit price for that element.","character-strings#Character Strings":"A string in programming is a sequence of characters, stored in an array, with an extra special character at the end, called the null terminator, represented as '\\0'.\nThis null terminator indicates the end of the string. It's value is always 0, meaning all its bits are zeros.\nThe position of this null terminator also tells us the length of the string. However, the total memory used by the string includes an extra space for this null terminator, so it's one more than the number of actual characters in the string.","syntax#Syntax":"We need to allocate memory for one additional byte to provide room for the null terminator:\nconst int NCHAR = 17;\nchar name[NCHAR + 1] = \"My Name is Arnold\";\nWe use the \"%s\" conversion specifier and the address of the start of the character string to send its contents to standard output:\nprintf(\"%s\", name);"}},"/c/07-structures":{"title":"07 Structures","data":{"structures#Structures":"The purpose of a structure in C programming is to allow programmers to define custom data types by grouping together various data types under one name. This allows for the creation of more complex data structures that can hold different types of data. Structures provide a way to organize and manage related data efficiently.","declaration#Declaration":"struct Tag\n{\n    [type] [identifier];\n    // ... other types\n};\nstruct keyword is used to declare a structure.\nTag is the name of the structure.\nInside the curly braces  you list the types of data that will be in your structure. Each data type in the structure is called a \"member\" or \"field\".\ntype is the data type of the member. It can be any valid C data type, like int, float, or even other structures.\nidentifier is the name of the member that you will use to access the member's value.","initialization#Initialization":"To set up a new structure variable with starting values in C, we use braces  with a list of values inside. These values are separated by commas and must be in the same order as the members in the structure. This is how we do it:\nstruct Tag identifier = { value, ... , value };","member-acces#Member Acces":"To access a member of an object of a structure, we use the dot operator (.). Dot notation takes the form:\nobject.member\nTo access an element of an array member, we use subscript notation\nobject.member[index]"}},"/error-notes/C/01-scanf":{"title":"01 Scanf","data":{"c-error-notes#C Error Notes":"","problems-with-c#Problems with %c":"scanf() only takes the characters it needs from the buffer, but this can cause issues when using %c. Consider the following program. When scanf() reads an integer, it leaves behind a newline character ('\\n') in the input buffer. The next time scanf() is called with %c, it thinks this leftover '\\n' is the input character. Because of this, the program never gets to read the tax status input from the buffer.\nBuffer?  A buffer is like a temporary storage spot in a computer's memory. It holds data for a short time while it's being moved from one place to another.\n#include <stdio.h>\nint main(void)\n{\n    int items;\n    char status; // tax status g or p\n    printf(\"Number of items : \");\n    scanf(\"%d\", &items);\n    printf(\"Status : \");\n    scanf(\"%c\", &status);   // ERROR: assigns \\n to variable 'status'\n                            //        and will not pause for user input\n    printf(\"%d items (%c)\\n\", items, status);\n    return 0;\n}\nThe above program produces the following output:\nNumber of items : 25\nStatus : 25 items (\n)\nNotice how the newline character ('\\n') (which was assigned to the tax status variable) places the closing parenthesis on a newline.\nMethod-1:\nscanf(\"%d\", &items);\nscanf(\"%c%c\", &junk, &status); // store one character in junk first\nMethod-2:\nscanf(\"%d\", &items);\nscanf(\"%*c%c\", &status);       // discard(ignore) one character first\nMethod-3:\nscanf(\"%d\", &items);\nscanf(\" %c\", &status);         // discard(ignore) all whitespace first\nMethod-4:\nscanf(\"%d%*c\", &items);        // discard(ignore) newline ('\\n')\nscanf(\"%c\", &status);\nMethod-5:\nscanf(\"%d\", &items);\nclear();                       // call a custom function to clear the buffer\nscanf(\"%c\", &status);"}},"/":{"title":"Dev notes","data":{"":"These are the notes from my journey in learning software development.\nPlease note that these notes are personally curated, and there may be errors. If you find any, I would appreciate it if you could submit a pull request or open an issue to help me improve the content.","table-of-contents#Table of Contents":"","c#C":"01-Basics_\n02-Types_\n03-Simple Calculation_\n04-Expression_\n05-Logic\n06-Array\n07-Structures","react#React":"01-HTML Attribute Conversion: From HTML to JSX","error-notes#Error Notes":"","c-1#C":"01-scanf"}},"/react/01-attribute-conversion":{"title":"HTML Attribute Conversion: From HTML to JSX","data":{"":"HTML Attribute\tJSX Attribute\tUsed in HTML Tags\tclass\tclassName\tAll HTML tags\tfor\thtmlFor\tlabel, output\tonchange\tonChange\tinput, select, textarea\tonclick\tonClick\tAll clickable tags (e.g., button, a)"}}}