(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7],{2517:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/c/04-expression",function(){return n(9926)}])},9926:function(e,s,n){"use strict";n.r(s),n.d(s,{__toc:function(){return t}});var r=n(5893),d=n(2673),i=n(2643);let t=[{depth:2,value:"Expression",id:"expression"},{depth:3,value:"Binary Operations",id:"binary-operations"},{depth:3,value:"Relational Expressions",id:"relational-expressions"},{depth:3,value:"Logical Expressions",id:"logical-expressions"}];function _createMdxContent(e){let s=Object.assign({h2:"h2",h3:"h3",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td",code:"code",em:"em"},(0,i.a)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"expression",children:"Expression"}),"\n",(0,r.jsx)(s.h3,{id:"binary-operations",children:"Binary Operations"}),"\n",(0,r.jsx)(s.p,{children:"Binary arithmetic operations are math actions we can do on whole numbers. These include adding, subtracting, multiplying, dividing and finding the remainder."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Arithmetic Expression"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Meaning"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"+"})," operand"]}),(0,r.jsx)(s.td,{children:"add the operands"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"-"})," operand"]}),(0,r.jsx)(s.td,{children:"subtract the right from the left operand"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"*"})," operand"]}),(0,r.jsx)(s.td,{children:"multiply the operands"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"/"})," operand"]}),(0,r.jsx)(s.td,{children:"divide the left by the right operand"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"%"})," operand"]}),(0,r.jsx)(s.td,{children:"remainder of the division of left by right"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"relational-expressions",children:"Relational Expressions"}),"\n",(0,r.jsxs)(s.p,{children:["C language has six ways to compare things. These comparisons are called relational expressions. They look at two values and decide if a condition is true or not. If it's ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"true"})}),", they give back ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"1"})}),"; if it's ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"false"})}),", they give back ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"0"})}),". The result you get from these comparisons is always an ",(0,r.jsx)(s.code,{children:"int"})," type."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Relational Expression"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Meaning"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"=="})," operand"]}),(0,r.jsx)(s.td,{children:"operands are equal"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:">"})," operand"]}),(0,r.jsx)(s.td,{children:"left is greater than the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:">="})," operand"]}),(0,r.jsx)(s.td,{children:"left is greater than or equal to the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"<"})," operand"]}),(0,r.jsx)(s.td,{children:"left is less than the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"<="})," operand"]}),(0,r.jsx)(s.td,{children:"left is less than or equal to the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"!="})," operand"]}),(0,r.jsx)(s.td,{children:"left is not equal to the right"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"logical-expressions",children:"Logical Expressions"}),"\n",(0,r.jsxs)(s.p,{children:["C language doesn't have special words for true or false. Instead, it sees the number ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"0"})})," as ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"false"})})," and any ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"other number"})})," as ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"true"})}),". C has three ways to do logical operations. These operations give back ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"1"})})," if they are ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"true"})})," and ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"0"})})," if they are ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"false"})}),". The result you get from these operations is always an ",(0,r.jsx)(s.code,{children:"int"})," type."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Logical Expression"})}),(0,r.jsx)(s.th,{children:"Meaning"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"&&"})," operand"]}),(0,r.jsx)(s.td,{children:"both operands are true"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"||"})," operand"]}),(0,r.jsx)(s.td,{children:"one of the operands is true"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"!"})," operand"]}),(0,r.jsx)(s.td,{children:"the operand is not true"})]})]})]})]})}s.default=(0,d.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.a)(),e.components);return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/c/04-expression.mdx",route:"/c/04-expression",timestamp:1697511984e3,title:"04 Expression",headings:t},pageNextRoute:"/c/04-expression"})}},function(e){e.O(0,[673,774,888,179],function(){return e(e.s=2517)}),_N_E=e.O()}]);