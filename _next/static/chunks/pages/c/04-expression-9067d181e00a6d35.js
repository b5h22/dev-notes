(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7],{2517:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/c/04-expression",function(){return n(9926)}])},9926:function(e,s,n){"use strict";n.r(s),n.d(s,{__toc:function(){return t}});var r=n(5893),i=n(2673),l=n(2643);let t=[{depth:2,value:"Expression",id:"expression"},{depth:3,value:"Binary Operations",id:"binary-operations"},{depth:3,value:"Relational Expressions",id:"relational-expressions"},{depth:3,value:"Logical Expressions",id:"logical-expressions"},{depth:3,value:"DeMorgan's Law",id:"demorgans-law"},{depth:3,value:"Binary operands",id:"binary-operands"},{depth:3,value:"Unary Operands",id:"unary-operands"},{depth:3,value:"Type Casting",id:"type-casting"},{depth:3,value:"Mixed-Type Expression",id:"mixed-type-expression"}];function _createMdxContent(e){let s=Object.assign({h2:"h2",h3:"h3",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td",code:"code",em:"em",ul:"ul",li:"li",pre:"pre",span:"span"},(0,l.a)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"expression",children:"Expression"}),"\n",(0,r.jsx)(s.h3,{id:"binary-operations",children:"Binary Operations"}),"\n",(0,r.jsx)(s.p,{children:"Binary arithmetic operations are math actions we can do on whole numbers. These include adding, subtracting, multiplying, dividing and finding the remainder."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Arithmetic Expression"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Meaning"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"+"})," operand"]}),(0,r.jsx)(s.td,{children:"add the operands"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"-"})," operand"]}),(0,r.jsx)(s.td,{children:"subtract the right from the left operand"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"*"})," operand"]}),(0,r.jsx)(s.td,{children:"multiply the operands"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"/"})," operand"]}),(0,r.jsx)(s.td,{children:"divide the left by the right operand"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"%"})," operand"]}),(0,r.jsx)(s.td,{children:"remainder of the division of left by right"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"relational-expressions",children:"Relational Expressions"}),"\n",(0,r.jsxs)(s.p,{children:["C language has six ways to compare things. These comparisons are called relational expressions. They look at two values and decide if a condition is true or not. If it's ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"true"})}),", they give back ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"1"})}),"; if it's ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"false"})}),", they give back ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"0"})}),". The result you get from these comparisons is always an ",(0,r.jsx)(s.code,{children:"int"})," type."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Relational Expression"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Meaning"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"=="})," operand"]}),(0,r.jsx)(s.td,{children:"operands are equal"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:">"})," operand"]}),(0,r.jsx)(s.td,{children:"left is greater than the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:">="})," operand"]}),(0,r.jsx)(s.td,{children:"left is greater than or equal to the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"<"})," operand"]}),(0,r.jsx)(s.td,{children:"left is less than the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"<="})," operand"]}),(0,r.jsx)(s.td,{children:"left is less than or equal to the right"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"!="})," operand"]}),(0,r.jsx)(s.td,{children:"left is not equal to the right"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"logical-expressions",children:"Logical Expressions"}),"\n",(0,r.jsxs)(s.p,{children:["C language doesn't have special words for true or false. Instead, it sees the number ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"0"})})," as ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"false"})})," and any ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"other number"})})," as ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"true"})}),". C has three ways to do logical operations. These operations give back ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"1"})})," if they are ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"true"})})," and ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"0"})})," if they are ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"false"})}),". The result you get from these operations is always an ",(0,r.jsx)(s.code,{children:"int"})," type."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Logical Expression"})}),(0,r.jsx)(s.th,{children:"Meaning"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"&&"})," operand"]}),(0,r.jsx)(s.td,{children:"both operands are true"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"||"})," operand"]}),(0,r.jsx)(s.td,{children:"one of the operands is true"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"!"})," operand"]}),(0,r.jsx)(s.td,{children:"the operand is not true"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"demorgans-law",children:"DeMorgan's Law"}),"\n",(0,r.jsx)(s.p,{children:"DeMorgan's Law is a rule in logic that helps us simplify complex statements. It has two parts:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:'"Not (A and B)" is the same as "(Not A) or (Not B)"'}),"\n",(0,r.jsx)(s.li,{children:'"Not (A or B)" is the same as "(Not A) and (Not B)"'}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Example:"}),"\n",(0,r.jsx)(s.pre,{"data-language":"c","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"c","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"// below logically identical"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:" "}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"// example #1"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"c "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"!"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"(a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"&&"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" b)"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"c "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"!"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"||"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"!"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"b"})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:" "}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"// example #2"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"c "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"!"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"&&"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"!"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"b"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"c "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"!"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"(a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"||"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" b)"})]})]})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"binary-operands",children:"Binary operands"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Expression"}),(0,r.jsx)(s.th,{children:"Shorthand"}),(0,r.jsx)(s.th,{children:"Longhand"}),(0,r.jsx)(s.th,{children:"Meaning"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"+="})," operand"]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i += 4"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i + 4"})}),(0,r.jsx)(s.td,{children:"add 4 to i and assign to i"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"-="})," operand"]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i -= 4"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i - 4"})}),(0,r.jsx)(s.td,{children:"subtract 4 from i and assign to i"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"*="})," operand"]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i *= 4"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i * 4"})}),(0,r.jsx)(s.td,{children:"multiply i by 4 and assign to i"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"/="})," operand"]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i /= 4"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i / 4"})}),(0,r.jsx)(s.td,{children:"divide i by 4 and assign to i"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["operand ",(0,r.jsx)(s.code,{children:"%="})," operand"]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i %= 4"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i % 4"})}),(0,r.jsx)(s.td,{children:"remainder after i / 4 then assign to i"})]})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"unary-operands",children:"Unary Operands"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Expression"}),(0,r.jsx)(s.th,{children:"Shorthand"}),(0,r.jsx)(s.th,{children:"Longhand"}),(0,r.jsx)(s.th,{children:"Meaning"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"++operand"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"++i"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i + 1"})}),(0,r.jsx)(s.td,{children:"(prefix) increment i by 1"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"operand++"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i++"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i + 1"})}),(0,r.jsx)(s.td,{children:"(postfix) increment i by 1"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"--operand"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"--i"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i - 1"})}),(0,r.jsx)(s.td,{children:"(prefix) decrement i by 1"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"operand--"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i--"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"i = i - 1"})}),(0,r.jsx)(s.td,{children:"(postfix) decrement i by 1"})]})]})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Prefix does the operation first, then gives you the result."}),"\n",(0,r.jsx)(s.li,{children:"Postfix gives you the result first, then does the operation."}),"\n"]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"type-casting",children:"Type Casting"}),"\n",(0,r.jsx)(s.p,{children:"Type conversions are supported by the C programming language. In order to convert\xa0the type of an operand, you put the target type in parenthesis before the operand. This\xa0statement is known as a cast."}),"\n",(0,r.jsx)(s.pre,{"data-language":"c","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"c","data-theme":"default",children:[(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"int"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"main"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"() {"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"int"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"5"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" b "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"2"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"printf("}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"Result of int division: '}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"%d"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:'\\n"'}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"/"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" b)"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:";"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" // 2"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"printf("}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"Result of double division: '}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"%f"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:'\\n"'}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" ("}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"double"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:")a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"/"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" b)"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:";"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" // 2.5"})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:" "}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"0"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h3,{id:"mixed-type-expression",children:"Mixed-Type Expression"}),"\n",(0,r.jsx)(s.p,{children:"Computers use different parts to handle whole numbers and decimal numbers. So, they can only work with calculations that use the same type of numbers. But sometimes, calculations use both types of numbers. So, we need rules to change one type of number into another type for these calculations."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Rank"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"long double"})}),(0,r.jsx)(s.td,{children:"highest"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"double"})}),(0,r.jsx)(s.td,{children:"..."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"..."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"long long"})}),(0,r.jsx)(s.td,{children:"..."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"long"})}),(0,r.jsx)(s.td,{children:"..."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"int"})}),(0,r.jsx)(s.td,{children:"..."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"short"})}),(0,r.jsx)(s.td,{children:"..."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"char"})}),(0,r.jsx)(s.td,{children:"lowest"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:'In a mixed-type expression, lower-ranked types are automatically converted to the type of the highest-ranked operand. This is called "promotion".'}),"\n",(0,r.jsx)(s.pre,{"data-language":"c","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"c","data-theme":"default",children:[(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"int"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"5"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"double"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" b "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"3.14"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"b "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" a;"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" // 'a' is automatically promoted to a double"})]})]})}),"\n",(0,r.jsx)(s.p,{children:'"Narrowing" is the opposite of promotion. It\'s when a value of a higher-ranked type is assigned to a variable of a lower-ranked type. This can cause a loss of data.'}),"\n",(0,r.jsx)(s.pre,{"data-language":"c","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"c","data-theme":"default",children:[(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"double"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"3.14"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"int"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" b;"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"b "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" a;"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" // 'a' is truncated to an int, so 'b' becomes 3, not 3.14"})]})]})})]})}s.default=(0,i.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,l.a)(),e.components);return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/c/04-expression.mdx",route:"/c/04-expression",timestamp:1699933144e3,title:"04 Expression",headings:t},pageNextRoute:"/c/04-expression"})}},function(e){e.O(0,[673,774,888,179],function(){return e(e.s=2517)}),_N_E=e.O()}]);